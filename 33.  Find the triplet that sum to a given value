class Solution{
    public:
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    bool find3Numbers(int A[], int n, int X)
    {
        
        //giving tle as we our using O(n^3) time complexity 
        //three loops are there 
        
        //one loop i have merge using pointer and make use of continue to 
        //avoid writing for loop 
        
        //but eventully it will same time complexity as of three nested loops.
    //   for(int i=0; i<n; i++){
           
    //       if(A[i]>X)continue;
           
    //         int sum=X - A[i];
    //          int rest;
    //          int findRest;
    //       for(int j= i+1; j<n;){
               
    //           if(A[j]> sum){
                 
    //              j++;
    //              continue;  
                   
    //           } 
    //             rest = sum - A[j];
    //             findRest;
               
    //           if(j == i+1){
                   
    //               findRest = j+1;    
                   
    //           }
               
    //           if(rest != A[findRest] && findRest == n-1){
                   
    //               j++;
    //               findRest = j+1;
    //               continue;
                   
    //           }
    //           if(rest == A[findRest]){
    //               return 1;
                   
    //           }
            
                
    //       }
    //   }
       
    //   return 0;
    
    
    
    //two pointer approach with two nested loop O(n^2)
    
        sort(A, A+n);
        
        // for(int i = 0; i<n; i++){
            
        //     cout<<A[i]<<" ";
        // }
        // cout<<endl;
        int sum=0;
        
        for(int i =0; i<n; i++){
            int secEle = i+1;
              int thirdEle = n-1;
            sum = A[i];
            
            while(secEle < thirdEle){
                
                sum+=(A[secEle] + A[thirdEle]);
                // cout<<sum<<" ";
                if(sum < X){
                   
                    sum=A[i];
                     secEle++;
                }
                else if(sum>X){
                    sum=A[i];
                    thirdEle--;
                    
                }
                else if(sum == X){
                    // cout<<sum;
                    return 1;
                    
                } 
                
            }
        }
    
        return 0;
    
    //  sort(A, A + n);

    // for (int i = 0; i < n; i++) {
    //     cout << A[i] << " ";
    // }
    // cout << endl;

    // for (int i = 0; i < n - 2; i++) {
    //     int secEle = i + 1;
    //     int thirdEle = n - 1;

    //     while (secEle < thirdEle) {
    //         int sum = A[i] + A[secEle] + A[thirdEle];
    //         cout << sum << " ";

    //         if (sum < X) {
    //             secEle++;
    //         } else if (sum > X) {
    //             thirdEle--;
    //         } else { // sum == X
    //             cout << sum;
    //             return 1;
    //         }
    //     }
    // }

    // return 0;
    }

};
